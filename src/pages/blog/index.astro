---
import Layout from '../../layouts/Layout.astro';
import { SITE_TITLE, SITE_DESCRIPTION } from '../../consts';
import { getCollection } from 'astro:content';
import FormattedDate from '../../components/FormattedDate.astro';

const posts = (await getCollection('blog')).sort(
	(a, b) => b.data.pubDate.valueOf() - a.data.pubDate.valueOf(),
);

// Helper function to ensure consistent paths with the base URL
function getPathWithBase(path) {
	const base = import.meta.env.BASE_URL || '';
	// Normalize base URL to ensure it doesn't have a trailing slash
	const normalizedBase = base.endsWith('/') ? base.slice(0, -1) : base;
	// Remove leading slash from path if it exists
	const cleanPath = path.startsWith('/') ? path.slice(1) : path;
	// Join the base with the path, ensuring a single slash separator
	return normalizedBase ? `${normalizedBase}/${cleanPath}` : `/${cleanPath}`;
}
---

<Layout title={`Blog | ${SITE_TITLE}`} description={SITE_DESCRIPTION}>
	<div class="blog-container">
		<h1>Blog Posts</h1>
		<section>
			<ul>
				{
					posts.map((post) => {
						// Generate post URL with correct base path
						const postUrl = getPathWithBase(`blog/${post.id}/`);
						
						// Handle hero image path with proper base path
						const imgSrc = post.data.heroImage 
							? getPathWithBase(post.data.heroImage)
							: '';
						
						return (
							<li>
								<a href={postUrl} class="post-card">
									{imgSrc && (
										<img 
											width={720} 
											height={360} 
											src={imgSrc} 
											alt="" 
										/>
									)}
									<h4 class="title">{post.data.title}</h4>
									<p class="date">
										<FormattedDate date={post.data.pubDate} />
									</p>
								</a>
							</li>
						);
					})
				}
			</ul>
		</section>
	</div>
</Layout>

<style>
	.blog-container {
		max-width: 1200px;  /* Wider container for the blog grid */
		margin: 0 auto;
	}
	.blog-container h1 {
		text-align: center;
		margin-bottom: 2rem;
		color: rgb(var(--black));
	}
	ul {
		display: flex;
		flex-wrap: wrap;
		gap: 2rem;
		list-style-type: none;
		margin: 0;
		padding: 0;
	}
	ul li {
		width: calc(50% - 1rem);
		transition: transform 0.2s ease;
	}
	ul li:hover {
		transform: translateY(-5px);
	}
	.post-card {
		display: block;
		text-decoration: none;
		border-radius: 8px;
		overflow: hidden;
		background: white;
		box-shadow: 0 2px 8px rgba(var(--gray), 25%);
		transition: all 0.2s ease;
	}
	.post-card:hover {
		box-shadow: var(--box-shadow);
	}
	ul li:first-child {
		width: 100%;
		margin-bottom: 1rem;
		text-align: center;
	}
	ul li:first-child img {
		width: 100%;
	}
	ul li:first-child .title {
		font-size: 2.369rem;
	}
	ul li img {
		margin-bottom: 0;
		border-radius: 8px 8px 0 0;
		width: 100%;
		height: auto;
		aspect-ratio: 2/1;
		object-fit: cover;
	}
	.title, .date {
		padding: 0 1rem;
	}
	.title {
		margin: 1rem 0 0.5rem 0;
		color: rgb(var(--black));
		line-height: 1;
	}
	.date {
		margin: 0 0 1rem 0;
		color: rgb(var(--gray));
	}
	ul li a:hover h4,
	ul li a:hover .date {
		color: var(--accent);
	}
	@media (max-width: 720px) {
		ul {
			gap: 0.5em;
		}
		ul li {
			width: 100%;
			text-align: center;
		}
		ul li:first-child {
			margin-bottom: 0;
		}
		ul li:first-child .title {
			font-size: 1.563em;
		}
	}
</style>
