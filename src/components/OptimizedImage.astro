import { getImage } from 'astro:assets';

interface Props {
  src: ImageMetadata | string;
  alt: string;
  width?: number; 
  height?: number;
  class?: string;
  loading?: 'lazy' | 'eager';
  decoding?: 'async' | 'sync' | 'auto';
  format?: 'webp' | 'avif' | 'png' | 'jpeg';
}

const { 
  src, 
  alt, 
  width, 
  height, 
  class: className = '',
  loading = 'lazy',
  decoding = 'async',
  format = 'webp'
} = Astro.props;

// Process the image using sharp
let optimizedImage;
try {
  // For ImageMetadata objects (import from assets)
  if (typeof src === 'object' && 'src' in src) {
    optimizedImage = await getImage({
      src: src,
      width: width,
      height: height,
      format: format
    });
  } 
  // For string URLs (public directory or external)
  else if (typeof src === 'string') {
    if (src.startsWith('http')) {
      // External URL - can't optimize these with getImage
      // Return a normal img tag
      optimizedImage = { src };
    } else {
      // Assuming local path in public directory
      optimizedImage = { src };
    }
  }
} catch (error) {
  console.error(`Failed to optimize image: ${error}`);
  // Fallback to original
  optimizedImage = { src: typeof src === 'object' && 'src' in src ? src.src : src };
}

<img 
  src={optimizedImage.src} 
  alt={alt}
  width={width} 
  height={height}
  class={className}
  loading={loading}
  decoding={decoding}
/> 