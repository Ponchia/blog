---
import '@pagefind/default-ui/css/ui.css';
import { join } from 'node:path';

interface Props {
  id?: string;
  className?: string;
}

const { id, className } = Astro.props;
const bundlePath = join(import.meta.env.BASE_URL, 'pagefind/');
const divProps = {
  ...(id ? { id } : {}),
  ...(className ? { class: className } : {}),
};
---

<div {...divProps} data-pagefind-ui data-bundle-path={bundlePath}></div>
<div id="search-error" class="search-error" style="display: none;">
  <p>
    Search index not found. Please run <code>npm run build</code> first to generate the search index.
  </p>
</div>

<script>
  import { PagefindUI } from '@pagefind/default-ui';
  window.addEventListener('DOMContentLoaded', () => {
    const allSelector = '[data-pagefind-ui]';
    const errorElement = document.getElementById('search-error');

    for (const el of document.querySelectorAll(allSelector)) {
      const elSelector = [
        ...(el.id ? [`#${el.id}`] : []),
        ...[...el.classList.values()].map(c => `.${c}`),
        allSelector,
      ].join('');
      const bundlePath = el.getAttribute('data-bundle-path');

      try {
        // Check if search index exists
        fetch(`${bundlePath}pagefind.js`, { method: 'HEAD' })
          .then(response => {
            if (!response.ok) {
              if (errorElement) errorElement.style.display = 'block';
              console.error('Search index not found. Please run `npm run build` to generate it.');
              return;
            }

            // Initialize search if the index exists
            const pagefindUI = new PagefindUI({
              element: elSelector,
              bundlePath,
              showImages: false,
              debounceTimeoutMs: 100,
            });

            const input = el.querySelector<HTMLInputElement>(`input[type="text"]`);
            input?.focus();

            // Handle query params for sharing search results
            const url = new URL(window.location.href);
            const params = new URLSearchParams(url.search);
            const query = params.get('q');

            // If query exists on page load
            if (query && input) {
              input.value = query;
              input.dispatchEvent(new Event('input', { bubbles: true }));
            }

            // Update URL when input changes
            input?.addEventListener('input', e => {
              const input = e.target as HTMLInputElement;
              const url = new URL(window.location.href);
              const params = new URLSearchParams(url.search);
              params.set('q', input.value);
              window.history.replaceState({}, '', `${url.pathname}?${params}`);
            });
          })
          .catch(error => {
            if (errorElement) errorElement.style.display = 'block';
            console.error('Error checking search index:', error);
          });
      } catch (error) {
        if (errorElement) errorElement.style.display = 'block';
        console.error('Error initializing search:', error);
      }
    }
  });
</script>

<style>
  /* Custom styles for the search component */
  :root {
    --pagefind-ui-scale: 1;
    --pagefind-ui-primary: var(--accent-dark);
    --pagefind-ui-text: var(--text-primary);
    --pagefind-ui-background: var(--bg-secondary);
    --pagefind-ui-border: var(--border-color);
    --pagefind-ui-tag: var(--bg-tertiary);
    --pagefind-ui-border-width: 1px;
    --pagefind-ui-border-radius: 8px;
    --pagefind-ui-image-border-radius: 8px;
    --pagefind-ui-image-box-ratio: 3 / 2;
    --pagefind-ui-font: var(--font-body);
  }

  div {
    margin: 2rem 0;
  }

  .search-error {
    padding: 1rem;
    background-color: var(--bg-tertiary);
    border: 1px solid var(--accent-dark);
    border-radius: 8px;
    margin-top: 1rem;
  }

  .search-error p {
    margin: 0;
    color: var(--text-primary);
  }

  .search-error code {
    background-color: var(--bg-primary);
    padding: 0.2rem 0.4rem;
    border-radius: 4px;
    font-family: monospace;
  }
</style>
