---
import type { HTMLAttributes } from 'astro/types';

type Props = HTMLAttributes<'a'>;

const { href, class: className, ...props } = Astro.props;
const { pathname } = Astro.url;
const baseURL = import.meta.env.BASE_URL;

// Normalize paths for comparison
function normalizePath(path: string) {
	// Ensure trailing slash for consistency
	return path.endsWith('/') ? path : `${path}/`;
}

// Get the current path for comparison
const currentPath = normalizePath(pathname);

// Get the link path for comparison
let linkPath: string;
if (typeof href === 'string') {
	linkPath = normalizePath(href);
} else {
	linkPath = normalizePath(baseURL);
}

// Check if active
const isActive = currentPath === linkPath || 
	(linkPath !== normalizePath(baseURL) && currentPath.startsWith(linkPath));
---

<a href={href} class:list={[className, { active: isActive }]} {...props}>
	<slot />
</a>
<style>
	a {
		display: inline-block;
		text-decoration: none;
		font-weight: 500;
		letter-spacing: 0.5px;
		position: relative;
		padding: 0.5rem;
		color: var(--text-primary);
		transition: color 0.2s ease;
	}
	
	a.active {
		font-weight: 700;
		color: var(--accent-light);
	}
</style>
