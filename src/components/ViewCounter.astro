---
// src/components/ViewCounter.astro
// This component displays the view count for a specific page
const { slug } = Astro.props;

// Make sure slug is a string to avoid any type issues
const safeSlug = typeof slug === 'string' ? slug : String(slug || '');

// Normalize the path to match what GoatCounter expects
// Ensure we have the right prefix format (/blog/blog/ for blog posts)
let normalizedPath = safeSlug.startsWith('/') ? safeSlug : `/${safeSlug}`;
normalizedPath = normalizedPath.endsWith('/') ? normalizedPath.slice(0, -1) : normalizedPath;

if (normalizedPath.includes('/blog/') && !normalizedPath.startsWith('/blog/blog/')) {
  normalizedPath = `/blog${normalizedPath}`;
} else if (!normalizedPath.startsWith('/blog/')) {
  normalizedPath = `/blog${normalizedPath}`;
}
---

<span class="view-counter">
  <svg
    xmlns="http://www.w3.org/2000/svg"
    width="16"
    height="16"
    viewBox="0 0 24 24"
    fill="none"
    stroke="currentColor"
    stroke-width="2"
    stroke-linecap="round"
    stroke-linejoin="round"
    class="view-icon"
  >
    <path d="M2 12s3-7 10-7 10 7 10 7-3 7-10 7-10-7-10-7Z"></path>
    <circle cx="12" cy="12" r="3"></circle>
  </svg>
  <span class="view-count" data-path={normalizedPath}>–</span>
</span>

<style>
  .view-counter {
    display: inline-flex;
    align-items: center;
    gap: 0.25rem;
    color: var(--accent-light, #6b7280);
    font-size: 0.875rem;
  }

  .view-icon {
    opacity: 0.7;
  }

  @media (max-width: 640px) {
    .view-icon {
      width: 14px;
      height: 14px;
    }

    .view-counter {
      font-size: 0.75rem;
    }
  }
</style>

<script>
  // Declare type for GoatCounter
  interface GoatCounter {
    count: (opts: { path?: string; event?: boolean; title?: string }) => void;
    visit_count: (opts: {
      append?: string;
      path?: string;
      type?: 'html' | 'svg' | 'png';
      no_branding?: boolean;
      attr?: Record<string, string>;
      style?: string;
    }) => void;
    get_data: () => Record<string, any>;
  }

  // Extend the Window interface to include goatcounter
  declare global {
    interface Window {
      goatcounter?: GoatCounter;
    }
  }

  // Client-side visitor count
  document.addEventListener('DOMContentLoaded', () => {
    const counters = document.querySelectorAll('.view-counter');

    counters.forEach(counter => {
      const countSpan = counter.querySelector('.view-count');
      const path = countSpan?.getAttribute('data-path') || '';

      // Wait for goatcounter to be available
      const checkGoatCounter = setInterval(() => {
        if (window.goatcounter && typeof window.goatcounter.visit_count === 'function') {
          clearInterval(checkGoatCounter);

          if (countSpan instanceof HTMLElement) {
            updateCount(path, countSpan);
          }
        }
      }, 100);

      // Set a timeout to ensure we don't wait forever
      setTimeout(() => {
        clearInterval(checkGoatCounter);
        if (countSpan && countSpan.textContent === '–') {
          if (countSpan instanceof HTMLElement) {
            countSpan.textContent = '1';
          }
        }
      }, 5000);
    });
  });

  // Function to fetch the count from JSON endpoint
  async function updateCount(path: string, countElement: HTMLElement) {
    if (!path) return;

    try {
      const pathWithoutLeadingSlash = path.startsWith('/') ? path.substring(1) : path;
      const url = `https://ponchia.goatcounter.com/counter//${pathWithoutLeadingSlash}.json`;

      const response = await fetch(url);

      if (response.ok) {
        const data = await response.json();

        if (data.count) {
          countElement.textContent = data.count;
        } else {
          countElement.textContent = '1';
        }
      } else {
        countElement.textContent = '1';
      }
    } catch (error) {
      countElement.textContent = '1';
    }
  }
</script>
