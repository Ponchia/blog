---
// src/components/ViewCounter.astro
// This component displays the view count for a specific page
const { slug } = Astro.props;

// API token for GoatCounter
const GOATCOUNTER_TOKEN = import.meta.env.PUBLIC_GOATCOUNTER_API_TOKEN;
const GOATCOUNTER_URL = "https://ponchia.goatcounter.com";

// Normalize the path to match what GoatCounter expects
const normalizedPath = slug.startsWith('/') ? slug : `/${slug}`;

// Initialize count with null, will be populated after fetch
let count: number | null = null;

try {
  // Fetch path ID first
  const pathsResponse = await fetch(`${GOATCOUNTER_URL}/api/v0/paths`, {
    headers: {
      'Content-Type': 'application/json',
      'Authorization': `Bearer ${GOATCOUNTER_TOKEN}`
    }
  });
  
  if (pathsResponse.ok) {
    const pathsData = await pathsResponse.json();
    // Find the path ID for the current slug
    const pathInfo = pathsData.paths.find((p: { path: string; id: number }) => p.path === normalizedPath);
    
    if (pathInfo && pathInfo.id) {
      // Now fetch the stats for this path ID
      const statsResponse = await fetch(`${GOATCOUNTER_URL}/api/v0/stats/hits`, {
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${GOATCOUNTER_TOKEN}`
        }
      });
      
      if (statsResponse.ok) {
        const statsData = await statsResponse.json();
        const pathStats = statsData.paths.find((p: { id: number; count: number }) => p.id === pathInfo.id);
        
        if (pathStats) {
          count = pathStats.count;
        }
      }
    }
  }
} catch (error) {
  console.error('Error fetching view count:', error);
  // Continue rendering without the count
}
---

<span class="view-counter" data-goatcounter-count data-goatcounter-path={normalizedPath}>
  <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="view-icon">
    <path d="M2 12s3-7 10-7 10 7 10 7-3 7-10 7-10-7-10-7Z"></path>
    <circle cx="12" cy="12" r="3"></circle>
  </svg>
  <span class="view-count">
    {count !== null ? count : '–'}
  </span>
</span>

<style>
  .view-counter {
    display: inline-flex;
    align-items: center;
    gap: 0.25rem;
    color: var(--accent-light, #6b7280);
    font-size: 0.875rem;
  }
  
  .view-icon {
    opacity: 0.7;
  }
  
  @media (max-width: 640px) {
    .view-icon {
      width: 14px;
      height: 14px;
    }
    
    .view-counter {
      font-size: 0.75rem;
    }
  }
</style>

<script>
  // Client-side fallback in case the server-side fetch fails
  document.addEventListener('DOMContentLoaded', () => {
    const counters = document.querySelectorAll('.view-counter .view-count');
    counters.forEach(counter => {
      // Only update if we're showing the fallback dash
      if (counter.textContent && counter.textContent.trim() === '–') {
        setTimeout(() => {
          // Try to use the client-side count if available
          const parent = counter.closest('[data-goatcounter-count]');
          if (parent && parent.getAttribute('title')) {
            counter.textContent = parent.getAttribute('title');
          }
        }, 1000);
      }
    });
  });
</script> 