---
// src/components/ViewCounter.astro
// This component displays the view count for a specific page
const { slug } = Astro.props;

// Normalize the path to match what GoatCounter expects
// The dashboard shows paths like /blog/blog/why-i-created-this-blog
// Make sure we're using the right path format with /blog/blog/ prefix for blog posts
let normalizedPath = slug.startsWith('/') ? slug : `/${slug}`;
normalizedPath = normalizedPath.endsWith('/') ? normalizedPath.slice(0, -1) : normalizedPath;

// Ensure the path has the right prefix based on the pattern in the dashboard
// Blog posts need /blog/blog/ prefix, other pages just need /blog/ prefix
if (normalizedPath.includes('/blog/') && !normalizedPath.startsWith('/blog/blog/')) {
  // It's a blog post path but doesn't have the right prefix
  normalizedPath = `/blog${normalizedPath}`;
} else if (!normalizedPath.startsWith('/blog/')) {
  // Other pages need at least the /blog/ prefix
  normalizedPath = `/blog${normalizedPath}`;
}

// For debugging
const debug = true;
---

<span class="view-counter">
  <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="view-icon">
    <path d="M2 12s3-7 10-7 10 7 10 7-3 7-10 7-10-7-10-7Z"></path>
    <circle cx="12" cy="12" r="3"></circle>
  </svg>
  <span class="view-count" data-path={normalizedPath}>–</span>
  
  {debug && (
    <span class="debug-info" style="display: none;">
      <pre>Path: {normalizedPath}</pre>
    </span>
  )}
</span>

<style>
  .view-counter {
    display: inline-flex;
    align-items: center;
    gap: 0.25rem;
    color: var(--accent-light, #6b7280);
    font-size: 0.875rem;
    position: relative;
    cursor: pointer;
  }
  
  .view-icon {
    opacity: 0.7;
  }
  
  .debug-info {
    position: absolute;
    top: 100%;
    left: 0;
    z-index: 1000;
    background: white;
    border: 1px solid #ddd;
    padding: 10px;
    border-radius: 4px;
    box-shadow: 0 2px 5px rgba(0,0,0,0.2);
    max-width: 500px;
    overflow: auto;
    font-family: monospace;
    font-size: 12px;
    white-space: pre-wrap;
    color: black;
  }
  
  @media (max-width: 640px) {
    .view-icon {
      width: 14px;
      height: 14px;
    }
    
    .view-counter {
      font-size: 0.75rem;
    }
  }
</style>

<script>
  // Declare type for GoatCounter
  interface GoatCounter {
    count: (opts: { path?: string; event?: boolean; title?: string }) => void;
    visit_count: (opts: { 
      append?: string; 
      path?: string;
      type?: 'html' | 'svg' | 'png';
      no_branding?: boolean;
      attr?: Record<string, string>;
      style?: string;
    }) => void;
    get_data: () => Record<string, any>;
  }
  
  // Extend the Window interface to include goatcounter
  declare global {
    interface Window {
      goatcounter?: GoatCounter;
    }
  }

  // Client-side debugging and visitor count
  document.addEventListener('DOMContentLoaded', () => {
    console.log('[ViewCounter Client] DOMContentLoaded event fired');
    
    // Find all counter elements
    const counters = document.querySelectorAll('.view-counter');
    console.log('[ViewCounter Client] Found counters:', counters.length);
    
    counters.forEach((counter, index) => {
      const countSpan = counter.querySelector('.view-count');
      const debugInfo = counter.querySelector('.debug-info');
      const path = countSpan?.getAttribute('data-path') || '';
      
      console.log(`[ViewCounter Client] Counter ${index} path:`, path);
      
      // Toggle debug info on click
      counter.addEventListener('click', (e) => {
        if (debugInfo && debugInfo instanceof HTMLElement) {
          const isVisible = debugInfo.style.display !== 'none';
          debugInfo.style.display = isVisible ? 'none' : 'block';
          e.stopPropagation();
        }
      });
      
      // Wait for goatcounter to be available
      const checkGoatCounter = setInterval(() => {
        if (window.goatcounter && typeof window.goatcounter.visit_count === 'function') {
          clearInterval(checkGoatCounter);
          
          // Get the count via JSON endpoint
          if (countSpan instanceof HTMLElement) {
            updateCount(path, countSpan);
          }
        }
      }, 100);
      
      // Set a timeout to ensure we don't wait forever
      setTimeout(() => {
        clearInterval(checkGoatCounter);
        if (countSpan && countSpan.textContent === '–') {
          console.log('[ViewCounter Client] GoatCounter not available after timeout, using fallback');
          countSpan.textContent = '1';
        }
      }, 5000);
    });
  });
  
  // Function to fetch the count from JSON endpoint
  async function updateCount(path: string, countElement: HTMLElement) {
    if (!path) return;
    
    try {
      console.log(`[ViewCounter Client] Fetching count for path: ${path}`);
      
      // Use the correct URL format with double slash - this is the format that works
      // Format: https://site.goatcounter.com/counter//path.json
      const url = `https://ponchia.goatcounter.com/counter//${path}.json`;
      console.log(`[ViewCounter Client] Request URL: ${url}`);
      
      const response = await fetch(url);
      
      if (response.ok) {
        const data = await response.json();
        console.log(`[ViewCounter Client] Received count data:`, data);
        
        if (data.count) {
          countElement.textContent = data.count;
        } else {
          console.log('[ViewCounter Client] No count in response, using default');
          countElement.textContent = '1';
        }
      } else {
        console.error(`[ViewCounter Client] Failed to fetch count: ${response.status}`);
        countElement.textContent = '1';
      }
    } catch (error) {
      console.error('[ViewCounter Client] Error fetching count:', error);
      countElement.textContent = '1';
    }
  }
</script> 