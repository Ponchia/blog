---
import type { CollectionEntry } from 'astro:content';
import BaseHead from '../components/BaseHead.astro';
import Header from '../components/Header.astro';
import Footer from '../components/Footer.astro';
import FormattedDate from '../components/FormattedDate.astro';
import Comments from '../components/Comments';

type Props = CollectionEntry<'blog'>['data'];

const { title, description, pubDate, updatedDate, heroImage } = Astro.props;

// Helper function to ensure hero image has the correct path
function getImagePath(image: string): string {
	if (!image) return '';
	// If already a full URL, return as is
	if (image.startsWith('http')) return image;
	
	// Get the base URL from the environment with fallback
	const base = import.meta.env.BASE_URL || '';
	// Normalize base URL to ensure it doesn't have a trailing slash
	const normalizedBase = base.endsWith('/') ? base.slice(0, -1) : base;
	// Remove leading slash from path if it exists
	const cleanPath = image.startsWith('/') ? image.slice(1) : image;
	// Join the base with the path, ensuring a single slash separator
	return normalizedBase ? `${normalizedBase}/${cleanPath}` : `/${cleanPath}`;
}

const heroImagePath = heroImage ? getImagePath(heroImage) : '';
---

<html lang="en">
	<head>
		<BaseHead title={title} description={description} />
		<!-- GoatCounter Analytics -->
		<script data-goatcounter="https://ponchia.goatcounter.com/count" async src="//gc.zgo.at/count.js"></script>
		<style>
			main {
				width: 720px;
				max-width: calc(100% - 2em);
				margin: auto;
				padding: 2em 1em;
				background-color: white;
				border-radius: 8px;
				box-shadow: 0 4px 6px rgba(var(--gray), 25%);
			}
			.hero-image {
				width: 100%;
				margin-bottom: 1.5em;
			}
			.hero-image img {
				display: block;
				margin: 0 auto;
				border-radius: 12px;
				box-shadow: var(--box-shadow);
				max-width: 100%;
				height: auto;
			}
			.prose {
				width: 100%;
				margin: auto;
				color: rgb(var(--gray-dark));
			}
			.title {
				margin-bottom: 1em;
				padding: 0 0 1em 0;
				text-align: center;
				line-height: 1;
				border-bottom: 1px solid rgba(var(--gray), 25%);
			}
			.title h1 {
				margin: 0 0 0.5em 0;
				color: rgb(var(--black));
			}
			.date {
				margin-bottom: 0.5em;
				color: rgb(var(--gray));
			}
			.last-updated-on {
				font-style: italic;
			}
			.comments-section {
				width: 100%;
				margin: 2em auto 0;
				padding-top: 2em;
				border-top: 1px solid rgba(var(--gray), 25%);
			}

			@media (max-width: 720px) {
				main {
					padding: 1em;
				}
			}
		</style>
	</head>

	<body>
		<Header />
		<main>
			<article>
				<div class="hero-image">
					{heroImagePath && <img width={1020} height={510} src={heroImagePath} alt="" />}
				</div>
				<div class="prose">
					<div class="title">
						<div class="date">
							<FormattedDate date={pubDate} />
							{
								updatedDate && (
									<div class="last-updated-on">
										Last updated on <FormattedDate date={updatedDate} />
									</div>
								)
							}
						</div>
						<h1>{title}</h1>
					</div>
					<slot />
				</div>
				<div class="comments-section">
					<Comments client:load />
				</div>
			</article>
		</main>
		<Footer />
	</body>
</html>
