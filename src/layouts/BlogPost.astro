---
import type { CollectionEntry } from 'astro:content';
import BaseHead from '../components/BaseHead.astro';
import Header from '../components/Header.astro';
import Footer from '../components/Footer.astro';
import FormattedDate from '../components/FormattedDate.astro';
import Comments from '../components/Comments';
import ViewCounter from '../components/ViewCounter.astro';

type Props = CollectionEntry<'blog'>['data'] & { minutesRead?: string };

const { 
	title, 
	description, 
	pubDate, 
	updatedDate, 
	gitCreatedDate, 
	gitLastModified, 
	heroImage, 
	minutesRead 
} = Astro.props;

// Use manual pubDate if available, otherwise use Git created date
const displayPubDate = pubDate || gitCreatedDate;
// Use manual updatedDate if available, otherwise use Git last modified date
const displayUpdatedDate = updatedDate || gitLastModified;

// Helper function to ensure hero image has the correct path
function getImagePath(image: string): string {
	if (!image) return '';
	// If already a full URL, return as is
	if (image.startsWith('http')) return image;
	
	// Get the base URL from the environment with fallback
	const base = import.meta.env.BASE_URL || '';
	// Normalize base URL to ensure it doesn't have a trailing slash
	const normalizedBase = base.endsWith('/') ? base.slice(0, -1) : base;
	// Remove leading slash from path if it exists
	const cleanPath = image.startsWith('/') ? image.slice(1) : image;
	// Join the base with the path, ensuring a single slash separator
	return normalizedBase ? `${normalizedBase}/${cleanPath}` : `/${cleanPath}`;
}

const heroImagePath = heroImage ? getImagePath(heroImage) : '';
// Get the current URL path for the view counter
const currentPath = Astro.url.pathname;
---

<html lang="en">
	<head>
		<BaseHead title={title} description={description} />
		<!-- GoatCounter Analytics -->
		<script data-goatcounter="https://ponchia.goatcounter.com/count" async src="//gc.zgo.at/count.js"></script>
		
		<!-- Theme initialization script - must be in head to avoid FOUC -->
		<script is:inline>
			// Get theme from localStorage or system preference
			function getTheme() {
				if (typeof localStorage !== 'undefined' && localStorage.getItem('theme')) {
					return localStorage.getItem('theme');
				}
				return window.matchMedia('(prefers-color-scheme: dark)').matches ? 'dark' : 'light';
			}
			
			// Apply theme to document immediately
			const theme = getTheme();
			document.documentElement.setAttribute('data-theme', theme);
		</script>
		
		<style>
			main {
				width: 100%;
				max-width: var(--content-width);
				margin: 0 auto;
				padding: 4rem 1.5rem;
			}
			.hero-image {
				width: 100%;
				margin-bottom: 3rem;
				position: relative;
				overflow: hidden;
			}
			.hero-image img {
				display: block;
				margin: 0 auto;
				width: 100%;
				height: auto;
				transition: transform 0.5s ease;
			}
			.hero-image:hover img {
				transform: scale(1.02);
			}
			.prose {
				width: 100%;
				margin: auto;
				color: var(--text-primary);
			}
			.title {
				margin-bottom: 3rem;
				text-align: left;
				line-height: 1.2;
			}
			.title h1 {
				margin: 0 0 0.5rem 0;
				color: var(--text-primary);
				font-size: 3.5rem;
			}
			.date {
				margin-bottom: 0.75rem;
				color: var(--accent-light);
				font-size: 1rem;
			}
			.post-meta {
				display: flex;
				flex-wrap: wrap;
				gap: 1rem;
				align-items: center;
				margin-bottom: 0.75rem;
				color: var(--accent-light);
				font-size: 1rem;
			}
			.post-meta > * {
				display: flex;
				align-items: center;
			}
			.reading-time {
				display: inline-block;
				padding-left: 1rem;
				border-left: 1px solid var(--accent-light);
				color: var(--accent-light);
				font-size: 1rem;
			}
			.last-updated-on {
				font-style: italic;
				color: var(--accent-light);
				margin-top: 0.5rem;
			}
			.comments-section {
				width: 100%;
				margin: 5rem auto 0;
				padding-top: 2rem;
				border-top: 1px solid var(--border-color);
			}
			.date-source {
				font-size: 0.8rem;
				color: var(--accent-light);
				opacity: 0.7;
				margin-left: 0.5rem;
			}

			@media (max-width: 768px) {
				main {
					padding: 2.5rem 1rem;
				}
				.title h1 {
					font-size: 2.5rem;
				}
				.comments-section {
					margin-top: 4rem;
				}
				.post-meta {
					gap: 0.75rem;
				}
			}
		</style>
	</head>

	<body>
		<Header />
		<main class="fade-in">
			<article class="blog-post">
				<div class="title">
					<div class="post-meta">
						{displayPubDate && (
							<div>
								<FormattedDate date={displayPubDate} />
								{!pubDate && gitCreatedDate && (
									<span class="date-source">(from git)</span>
								)}
							</div>
						)}
						{
							minutesRead && (
								<div class="reading-time">{minutesRead}</div>
							)
						}
						<ViewCounter slug={currentPath} />
					</div>
					{
						displayUpdatedDate && (
							<div class="last-updated-on">
								Last updated on <FormattedDate date={displayUpdatedDate} />
								{!updatedDate && gitLastModified && (
									<span class="date-source">(from git)</span>
								)}
							</div>
						)
					}
					<h1>{title}</h1>
				</div>
				{heroImagePath && (
					<div class="hero-image">
						<img width={1020} height={510} src={heroImagePath} alt="" />
					</div>
				)}
				<div class="prose blog-content">
					<slot />
				</div>
				<div class="comments-section">
					<Comments client:load />
				</div>
			</article>
		</main>
		<Footer />
	</body>
</html>
