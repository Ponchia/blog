---
import type { CollectionEntry } from 'astro:content';
import BaseHead from '../components/BaseHead.astro';
import Header from '../components/Header.astro';
import Footer from '../components/Footer.astro';
import FormattedDate from '../components/FormattedDate.astro';
import Comments from '../components/Comments';
import ViewCounter from '../components/ViewCounter.astro';

type Props = CollectionEntry<'blog'>['data'] & { minutesRead?: string };

const { 
	title, 
	description, 
	pubDate, 
	updatedDate, 
	gitCreatedDate, 
	gitLastModified, 
	heroImage, 
	minutesRead 
} = Astro.props;

// Helper function to ensure we have a valid Date object
function ensureDate(dateValue: Date | string | undefined | null): Date | null {
	if (!dateValue) return null;
	
	if (dateValue instanceof Date) return dateValue;
	
	// If it's a string, try to convert it to a Date
	try {
		const parsedDate = new Date(dateValue);
		if (!isNaN(parsedDate.getTime())) {
			return parsedDate;
		}
	} catch (e) {
		console.error("Invalid date format:", dateValue);
	}
	
	return null;
}

// Use manual pubDate if available, otherwise use Git created date
const displayPubDate = ensureDate(pubDate) || ensureDate(gitCreatedDate);
// Use manual updatedDate if available, otherwise use Git last modified date
const displayUpdatedDate = ensureDate(updatedDate) || ensureDate(gitLastModified);

// Helper function to ensure hero image has the correct path
function getHeroImagePath(path: string | undefined) {
	if (!path) return undefined;
	
	// If it's already an absolute URL, return as is
	if (path.startsWith('http')) return path;
	
	// Otherwise, prepend the base URL
	const base = import.meta.env.BASE_URL || '';
	// Remove leading slash from path if it exists for proper joining
	const cleanPath = path.startsWith('/') ? path.slice(1) : path;
	// Join with base path
	return `${base}${cleanPath}`;
}

// Get hero image path with proper base URL
const heroImagePath = getHeroImagePath(heroImage);

// Get the current path for view counter
const currentPath = Astro.url.pathname;
---

<html lang="en">
	<head>
		<BaseHead title={title} description={description} />
		
		<!-- Schema.org structured data for BlogPosting -->
		<script type="application/ld+json" set:html={JSON.stringify({
			"@context": "https://schema.org",
			"@type": "BlogPosting",
			"headline": title,
			"description": description,
			"image": heroImagePath ? new URL(heroImagePath, Astro.site).toString() : undefined,
			"datePublished": displayPubDate?.toISOString() || undefined,
			"dateModified": displayUpdatedDate?.toISOString() || displayPubDate?.toISOString() || undefined,
			"author": {
				"@type": "Person",
				"name": "Ponchia"
			},
			"publisher": {
				"@type": "Organization",
				"name": "Ponchia's Blog",
				"logo": {
					"@type": "ImageObject",
					"url": new URL(`${import.meta.env.BASE_URL}favicon.svg`, Astro.site).toString()
				}
			},
			"mainEntityOfPage": {
				"@type": "WebPage",
				"@id": Astro.url.toString()
			}
		})}></script>
		
		<!-- Theme initialization script - must be in head to avoid FOUC -->
		<script is:inline>
			// Get theme from localStorage or system preference
			function getTheme() {
				if (typeof localStorage !== 'undefined' && localStorage.getItem('theme')) {
					return localStorage.getItem('theme');
				}
				return window.matchMedia('(prefers-color-scheme: dark)').matches ? 'dark' : 'light';
			}
			
			// Apply theme to document immediately
			const theme = getTheme();
			document.documentElement.setAttribute('data-theme', theme);
		</script>
		
		<style>
			main {
				width: 100%;
				max-width: var(--content-width);
				margin: 0 auto;
				padding: 4rem 1.5rem;
			}
			.hero-image {
				width: 100%;
				margin-bottom: 3rem;
				position: relative;
				overflow: hidden;
			}
			.hero-image img {
				display: block;
				margin: 0 auto;
				width: 100%;
				height: auto;
				transition: transform 0.5s ease;
			}
			.hero-image:hover img {
				transform: scale(1.02);
			}
			.prose {
				width: 100%;
				margin: auto;
				color: var(--text-primary);
			}
			.title {
				margin-bottom: 3rem;
				text-align: left;
				line-height: 1.2;
			}
			.title h1 {
				margin: 0 0 0.5rem 0;
				color: var(--text-primary);
				font-size: 3.5rem;
			}
			.date {
				margin-bottom: 0.75rem;
				color: var(--accent-light);
				font-size: 1rem;
			}
			.post-meta {
				display: flex;
				flex-wrap: wrap;
				gap: 1rem;
				align-items: center;
				margin-bottom: 0.75rem;
				color: var(--accent-light);
				font-size: 1rem;
			}
			.post-meta > * {
				display: flex;
				align-items: center;
			}
			.reading-time {
				display: inline-block;
				padding-left: 1rem;
				border-left: 1px solid var(--accent-light);
				color: var(--accent-light);
				font-size: 1rem;
			}
			.last-updated-on {
				font-style: italic;
				color: var(--accent-light);
				margin-top: 0.5rem;
			}
			.comments-section {
				width: 100%;
				margin: 5rem auto 0;
				padding-top: 2rem;
				border-top: 1px solid var(--border-color);
			}
			.date-source {
				font-size: 0.8rem;
				color: var(--accent-light);
				opacity: 0.7;
				margin-left: 0.5rem;
			}

			@media (max-width: 768px) {
				main {
					padding: 2.5rem 1rem;
				}
				.title h1 {
					font-size: 2.5rem;
				}
				.comments-section {
					margin-top: 4rem;
				}
				.post-meta {
					gap: 0.75rem;
				}
			}
		</style>
	</head>

	<body>
		<Header />
		<main class="fade-in">
			<article class="blog-post">
				<div class="title">
					<div class="post-meta">
						{displayPubDate && (
							<div>
								<FormattedDate date={displayPubDate} />
								{!pubDate && gitCreatedDate && (
									<span class="date-source">(from git)</span>
								)}
							</div>
						)}
						{
							minutesRead && (
								<div class="reading-time">{minutesRead}</div>
							)
						}
						<ViewCounter slug={currentPath} />
					</div>
					{
						displayUpdatedDate && (
							<div class="last-updated-on">
								Last updated on <FormattedDate date={displayUpdatedDate} />
								{!updatedDate && gitLastModified && (
									<span class="date-source">(from git)</span>
								)}
							</div>
						)
					}
					<h1>{title}</h1>
				</div>
				{heroImagePath && (
					<div class="hero-image">
						<img 
							width={1020} 
							height={510} 
							src={heroImagePath} 
							alt={title}
							loading="eager"
							fetchpriority="high"
							decoding="async"
						/>
					</div>
				)}
				<div class="prose blog-content">
					<slot />
				</div>
				<div class="comments-section">
					<Comments client:idle />
				</div>
			</article>
		</main>
		<Footer />
		
		<!-- GoatCounter Analytics -->
		<script data-goatcounter="https://ponchia.goatcounter.com/count" defer src="//gc.zgo.at/count.js"></script>
	</body>
</html>
