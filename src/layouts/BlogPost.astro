---
import type { CollectionEntry } from 'astro:content';
import BaseHead from '../components/BaseHead.astro';
import Header from '../components/Header.astro';
import Footer from '../components/Footer.astro';
import FormattedDate from '../components/FormattedDate.astro';
import Comments from '../components/Comments';

type Props = CollectionEntry<'blog'>['data'];

const { title, description, pubDate, updatedDate, heroImage } = Astro.props;

// Helper function to ensure hero image has the correct path
function getImagePath(image: string): string {
	if (!image) return '';
	// If already a full URL, return as is
	if (image.startsWith('http')) return image;
	
	// Get the base URL from the environment with fallback
	const base = import.meta.env.BASE_URL || '';
	// Normalize base URL to ensure it doesn't have a trailing slash
	const normalizedBase = base.endsWith('/') ? base.slice(0, -1) : base;
	// Remove leading slash from path if it exists
	const cleanPath = image.startsWith('/') ? image.slice(1) : image;
	// Join the base with the path, ensuring a single slash separator
	return normalizedBase ? `${normalizedBase}/${cleanPath}` : `/${cleanPath}`;
}

const heroImagePath = heroImage ? getImagePath(heroImage) : '';
---

<html lang="en">
	<head>
		<BaseHead title={title} description={description} />
		<!-- GoatCounter Analytics -->
		<script data-goatcounter="https://ponchia.goatcounter.com/count" async src="//gc.zgo.at/count.js"></script>
		
		<!-- Theme initialization script - must be in head to avoid FOUC -->
		<script is:inline>
			// Get theme from localStorage or system preference
			function getTheme() {
				if (typeof localStorage !== 'undefined' && localStorage.getItem('theme')) {
					return localStorage.getItem('theme');
				}
				return window.matchMedia('(prefers-color-scheme: dark)').matches ? 'dark' : 'light';
			}
			
			// Apply theme to document immediately
			const theme = getTheme();
			document.documentElement.setAttribute('data-theme', theme);
		</script>
		
		<style>
			main {
				width: 100%;
				max-width: var(--content-width);
				margin: 0 auto;
				padding: 4rem 1.5rem;
			}
			.hero-image {
				width: 100%;
				margin-bottom: 3rem;
				position: relative;
				overflow: hidden;
			}
			.hero-image img {
				display: block;
				margin: 0 auto;
				width: 100%;
				height: auto;
				transition: transform 0.5s ease;
			}
			.hero-image:hover img {
				transform: scale(1.02);
			}
			.prose {
				width: 100%;
				margin: auto;
				color: var(--text-primary);
			}
			.title {
				margin-bottom: 3rem;
				text-align: left;
				line-height: 1.2;
			}
			.title h1 {
				margin: 0 0 0.5rem 0;
				color: var(--text-primary);
				font-size: 3.5rem;
			}
			.date {
				margin-bottom: 0.75rem;
				color: var(--accent-light);
				font-size: 1rem;
			}
			.last-updated-on {
				font-style: italic;
				color: var(--accent-light);
				margin-top: 0.5rem;
			}
			.comments-section {
				width: 100%;
				margin: 5rem auto 0;
				padding-top: 2rem;
				border-top: 1px solid var(--border-color);
			}

			@media (max-width: 768px) {
				main {
					padding: 2.5rem 1rem;
				}
				.title h1 {
					font-size: 2.5rem;
				}
				.comments-section {
					margin-top: 4rem;
				}
			}
		</style>
	</head>

	<body>
		<Header />
		<main class="fade-in">
			<article class="blog-post">
				<div class="title">
					<div class="date">
						<FormattedDate date={pubDate} />
						{
							updatedDate && (
								<div class="last-updated-on">
									Last updated on <FormattedDate date={updatedDate} />
								</div>
							)
						}
					</div>
					<h1>{title}</h1>
				</div>
				{heroImagePath && (
					<div class="hero-image">
						<img width={1020} height={510} src={heroImagePath} alt="" />
					</div>
				)}
				<div class="prose blog-content">
					<slot />
				</div>
				<div class="comments-section">
					<Comments client:load />
				</div>
			</article>
		</main>
		<Footer />
	</body>
</html>
